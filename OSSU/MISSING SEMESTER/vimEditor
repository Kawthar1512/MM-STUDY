Why Learn Vim?
Designed for editing, not writing â€” optimized for how programmers actually work.

Modal editing: different modes for different actions (Normal, Insert, Visual, etc.).

Keyboard-centric: no mouse needed = faster edits once you build muscle memory.

Highly customizable and extensible.

Getting Started with Vim
Step-by-step approach to learning:

Do a tutorial: Like this guide or interactive tools like [vimtutor] or openvim.com.

Use Vim for everything: Emails, notes, code, etc.

Google everything: If it feels slow or inefficient, thereâ€™s likely a better way.

Initial timeline:

1â€“2 hours: Basics (navigation, saving, quitting).

20 hours: As efficient as your old editor.

Ongoing: Continuous speed gains and new tricks.

Vim Core Concepts
Modes: Normal (ESC), Insert (i), Visual (v, V, Ctrl-v), Replace (R), Command (:).

Basic movements: hjkl, w, b, 0, $, gg, G.

Editing: d{motion}, c{motion}, x, s, u, Ctrl-r, y, p.

Visual mode + edit: Select text and use d, y, or c.

Counts and modifiers: 3dw, ci(, da'.

ðŸ”§ Buffers, Windows, Tabs
Buffers: Open files

Windows: Views (can show the same buffer in multiple panes)

Tabs: Groupings of windows
Commands:

:ls â€” list buffers

:sp, :vsp â€” horizontal/vertical splits

:tabnew, gt â€” new tabs, switch tabs

ðŸ›  Command Mode Essentials
:w, :q, :wq, :e, :help

:! to run shell commands

:s/foo/bar/g â€” powerful substitute tool for search and replace

âœ¨ Customization
Config file: ~/.vimrc

Use starter templates from reputable sources (like instructorsâ€™ dotfiles)

Vimscript or Lua (for Neovim) enables advanced automation

ðŸ”Œ Plugins (Optional, but Powerful)
No need for plugin manager (Vim 8+), just use ~/.vim/pack/vendor/start/

Good ones:

ctrlp.vim â€“ fuzzy finder

nerdtree â€“ file explorer

vim-easymotion â€“ better navigation

ack.vim â€“ code search

Explore: vimawesome.com

ðŸ’¡ Vim Philosophy
"The editor should match the speed at which you think."

ðŸ§ª Examples of Vim Power
Macros: Record and replay complex edits

Search and replace with regex

Window splits for comparing or editing multiple files

Vim in Other Environments
Shell (set -o vi or bindkey -v)

Python REPL and others via .inputrc

Web (e.g., Vimium, Tridactyl)

Visual Studio Code (Vim emulation plugin)
